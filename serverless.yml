service: xpeppers-academy

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-offline

custom:
  bucketName: academy.xpeppers.com
  certificateArn: arn:aws:acm:us-east-1:422553113847:certificate/40271fd2-1c32-46ab-9860-c33463db2f20
  serverless-offline:
    port: 8080

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  environment:
    BUCKET_NAME: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        Fn::Join: ['', [Fn::GetAtt: [ XpeppersAcademyBucket, Arn ], '/*'] ]

functions:
  save:
    handler: handler.save
    events:
      - http:
          path: /save
          method: post
          cors: true
  read:
    handler: handler.read
    events:
      - http:
          path: /read
          method: get
          cors: true
  delete:
    handler: handler.delete
    events:
      - http:
          path: /delete
          method: post
          cors: true
resources:
  Resources:
    XpeppersAcademyBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    XpeppersAcademyBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - "s3:GetObject"
              Resource:
                Fn::Join: ['', [Fn::GetAtt: [ XpeppersAcademyBucket, Arn ], '/*'] ]
        Bucket:
          Ref: XpeppersAcademyBucket
    CDNMedia:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.bucketName}
          Origins:
            - DomainName: ${self:custom.bucketName}.s3.amazonaws.com
              Id: myS3Origin
              S3OriginConfig: {}
          Enabled: 'true'
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            MaxTTL: 0
            MinTTL: 0
            DefaultTTL: 0
            AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_200
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificateArn}
            SslSupportMethod: sni-only